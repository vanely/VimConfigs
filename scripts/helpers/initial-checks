#!/usr/bin/bash

set -e  # Exit on error
set -u  # Exit on undefined variable

detect_operating_system() {
  # Detect operating system
  os_name=$(uname -s)
  case "$os_name" in
      Linux*)     machine=Linux;;
      Darwin*)    machine=Mac;;
      *)          
          machine="non"
          # echo "Unsupported operating system: ${os_name}"
          ;;
  esac
  echo $machine
}

source_shell_config() {
  if [[ -f "${HOME}/.zshrc" ]]; then
    source "${HOME}/.zshrc"
  else 
    source "${HOME}/.bashrc"
  fi
}

current_os=$(detect_operating_system)

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if running with sudo privileges
check_sudo() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "This script must be run with sudo privileges"
        exit 1
    fi
}

# Function to update package repositories
update_repos() {
    case "$1" in
        "Linux")
            if command_exists apt-get; then
                apt-get update
            elif command_exists dnf; then
                dnf check-update || true  # dnf returns 100 if updates available
            elif command_exists pacman; then
                pacman -Sy
            fi
            ;;
        "Mac")
            if command_exists brew; then
                brew update
            else
                echo "Homebrew not found. Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            ;;
    esac
}

install_homebrew() {
  if ! command -v brew &> /dev/null; then
    echo "Preparing to install brew package manager"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_scoop() {
  if ! command -v scoop &> /dev/null; then
    echo "Installing scoop windows package manager..."
    powershell scoop_install.ps1
  fi
}

install_ripgrep() {
  if [[ -n "$(which ripgrep)" ]]; then
    echo "ripgrep is already installed on this machine."
    echo "---------------------------------------------"
    echo
  else
    echo "Installing ripgrep..."
    echo "---------------------------------------------"
    echo
    if [[ "${OSTYPE}" == "linux-gnu" ]]; then
      # install for linux(ubuntu/debian)
      if ! sudo apt update -y 2>/dev/null; then
        echo "Warning: Could not update package list (sudo may be restricted in container)"
        echo "Skipping ripgrep installation due to permission restrictions"
        echo "---------------------------------------------"
        echo
        return 0
      fi
      if ! sudo apt install ripgrep -y 2>/dev/null; then
        echo "Warning: Could not install ripgrep (sudo may be restricted in container)"
        echo "---------------------------------------------"
        echo
        return 0
      fi
      echo "---------------------------------------------"
      echo
    elif [[ "${OSTYPE}" == "darwin" ]]; then
      # install for mac
      brew install ripgrep
      echo "---------------------------------------------"
    elif [[ "${OSTYPE}" == "msys" ]]; then
      # install for windows(Git Bash)
      if ! command -v scoop &> /dev/null; then
        echo "Installing scoop windows package manager..."
        powershell scoop_install.ps1
      fi
      source ~/.bashrc
      scoop install ripgrep
      echo "---------------------------------------------"
    else
      echo "Usupported operating system."
    fi
  fi
}

install_ack-grep() {
  if [[ -n "$(which ack)" ]]; then
    echo "ack-grep is already installed on this machine."
    echo "---------------------------------------------"
    echo
  else
    echo "Installing ack-grep"
    echo "---------------------------------------------"
    echo
    if [[ "${OSTYPE}" == "linux-gnu" ]]; then
      # install for linux(ubuntu/debian)
      if ! sudo apt update -y 2>/dev/null; then
        echo "Warning: Could not update package list (sudo may be restricted in container)"
        echo "Skipping ack-grep installation due to permission restrictions"
        echo "---------------------------------------------"
        echo
        return 0
      fi
      if ! sudo apt install ack-grep -y 2>/dev/null; then
        echo "Warning: Could not install ack-grep (sudo may be restricted in container)"
        echo "---------------------------------------------"
        echo
        return 0
      fi
      echo "---------------------------------------------"
      echo
    elif [[ "${OSTYPE}" == "darwin" ]]; then
      # install for mac
      brew install ack
      echo "---------------------------------------------"
    elif [[ "${OSTYPE}" == "msys" ]]; then
      # install for windows(Git Bash)
      scoop install ack
      echo "---------------------------------------------"
    else
      echo "Usupported operating system."
    fi
  fi
}

generate_random_char() {
  tr -dc 'a-zA-Z0-9' </dev/urandom | head -c 1
}

install_vim() {
  # Detect operating system
  if [[ "${current_os}" == "Linux" ]]; then
      # Linux(ubuntu/debian)
    if command -v apt-get >/dev/null 2>&1; then
      sudo apt-get update
      sudo apt-get install -y vim
    else
      echo "Unsuported Linux distribution. Please install vim manually."
    fi
  elif [[ "${current_os}" == "Mac" ]]; then
    # macOS
    if command -v brew >/dev/null 2>&1; then
      brew update
      brew install vim
    else
      install_homebrew
      brew update
      brew install vim
    fi
  else 
    # Windows(Git Bash/MSYS2)
    curl -fLo ./vim_install.exe  https://github.com/vim/vim-win32-installer/releases/download/v9.1.0/gvim_9.1.0_x64_signed.exe
    powershell ./vim_install.exe
  fi
}

create_vim_directories() {
  VIM_DIR="${HOME}/.vim"

  DIRS=("autoload" "backup" "colors" "plugged")
  if [[ ! -d "${VIM_DIR}" ]]; then
    echo "Creating ${VIM_DIR} directory."
    mkdir "${VIM_DIR}"
  fi

  for dir in "${DIRS[@]}"; do
    if [[ ! -d "${VIM_DIR}/${dir}" ]]; then
      echo "Creating ${VIM_DIR} directory."
      mkdir "${VIM_DIR}/${dir}"
    else
      echo "${VIM_DIR}/${dir} already exists."
    fi
  done
}

create_neovim_directories() {
  NEOVIM_DIR="${HOME}/.config/nvim"
  NEOVIM_VSCODE_DIR="${HOME}/.config/nvim/vscode"
   
  # Create the neovim directories
  if [[ ! -d "${NEOVIM_DIR}" ]]; then
    echo "Creating ${NEOVIM_DIR} directory."
    mkdir -p "${NEOVIM_DIR}"
  fi
  
  if [[ ! -d "${NEOVIM_VSCODE_DIR}" ]]; then
    echo "Creating ${NEOVIM_VSCODE_DIR} directory."
    mkdir -p "${NEOVIM_VSCODE_DIR}"
  fi
  
}

copy_vim_config_to_home() {
  CURRENT_DIR="$(pwd)"
  NEW_VIMRC_PATH="../configs/personal/.vimrc"

  # Check if .vimrc already exists in home directory, to make way for the new one.
  if [[ -f "${HOME}/.vimrc" ]]; then
    RANDOM_CHAR="$(generate_random_char)"

    # Rename the existing .vimrc file
    echo "Renaming existing .vimrc to .vimrc_${RANDOM_CHAR}"
    mv "${HOME}/.vimrc" "${HOME}/.vimrc_${RANDOM_CHAR}"
  fi

  # Copy new .vimrc to home directory
  if [[ -f "${CURRENT_DIR}/${NEW_VIMRC_PATH}" ]]; then
    cp "${CURRENT_DIR}/${NEW_VIMRC_PATH}" "${HOME}/.vimrc"
    echo "Copied new .vimrc to ${HOME}"
  else
    echo "The file ${CURRENT_DIR}/${NEW_VIMRC_PATH} does not exist."
  fi
}

copy_neovim_config_to_home() {
  CURRENT_DIR="$(pwd)"
  NEW_NEOVIM_CONFIG_PATH="../configs/personal/neovim/init.lua"
  NEW_VSCODE_NEOVIM_CONFIG_PATH="../configs/personal/neovim/vscode/vscode.vim"

    # Check if neovim config already exists in home directory, to make way for the new one.
  if [[ -f "${HOME}/.config/nvim/init.lua" ]]; then
    RANDOM_CHAR="$(generate_random_char)"

    # Rename the existing init.lua file
    echo "Renaming existing neovim config to init_${RANDOM_CHAR}.lua"
    mv "${HOME}/.config/nvim/init.lua" "${HOME}/.config/nvim/init_${RANDOM_CHAR}.lua"
  fi

  if [[ -f "${HOME}/.config/nvim/vscode/vscode.vim" ]]; then
    RANDOM_CHAR="$(generate_random_char)"

    # Rename the existing vscode.vim file
    echo "Renaming existing vscode neovim config to vscode_${RANDOM_CHAR}.vim"
    mv "${HOME}/.config/nvim/vscode/vscode.vim" "${HOME}/.config/nvim/vscode/vscode_${RANDOM_CHAR}.vim"
  fi

  # Copy new init.lua to home directory
  if [[ -f "${CURRENT_DIR}/${NEW_NEOVIM_CONFIG_PATH}" ]]; then
    cp "${CURRENT_DIR}/${NEW_NEOVIM_CONFIG_PATH}" "${HOME}/.config/nvim/init.lua"
    echo "Copied new neovim config to ${HOME}/.config/nvim"
  else
    echo "The file ${CURRENT_DIR}/${NEW_NEOVIM_CONFIG_PATH} does not exist."
  fi

  # Copy new vscode.vim to home directory
  if [[ -f "${CURRENT_DIR}/${NEW_VSCODE_NEOVIM_CONFIG_PATH}" ]]; then
    cp "${CURRENT_DIR}/${NEW_VSCODE_NEOVIM_CONFIG_PATH}" "${HOME}/.config/nvim/vscode/vscode.vim"
    echo "Copied new vscode neovim config to ${HOME}/.config/nvim/vscode"
  else
    echo "The file ${CURRENT_DIR}/${NEW_VSCODE_NEOVIM_CONFIG_PATH} does not exist."
  fi
}

install_vim_piug() {
  VIM_PLUG_PATH="${HOME}/.vim/autoload/plug.vim"
  VIM_PLUG_URL="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

  if [[ -f "${VIM_PLUG_PATH}" ]]; then
    echo "vim-plug is already installed"
  else
    echo "installing vim-plug..."

    # Check if either curl or wget are installed and use to install vim-plug
    if command -v curl >/dev/null 2>&1; then
      curl -fLo "${VIM_PLUG_PATH}" --create-dirs "${VIM_PLUG_URL}"
    elif command -v wget >/dev/null 2>&1; then
      wget -O "${VIM_PLUG_PATH}" "${VIM_PLUG_URL}"
    else
      echo "Neither curl, nor wget is installed please install one of the utilities to continue."
      exit 1
    fi
    echo "vim-plug installed successfully."
  fi
}

install_ctags() {
  if [[ "${OSTYPE}" == "darwin" ]]; then
    if ! command -v brew &> /dev/null; then
      install_homebrew
    fi
    echo "Installing ctags with Homebrew..."
    brew install ctags
  elif [[ "${OSTYPE}" == "linux-gnu" ]]; then
    echo "Updating package list..."
    if ! sudo apt-get update -y 2>/dev/null; then
      echo "Warning: Could not update package list (sudo may be restricted in container)"
      echo "Skipping ctags installation due to permission restrictions"
      return 0
    fi
    echo "Installing ctags with apt-get..."
    if ! sudo apt-get install -y ctags 2>/dev/null; then
      echo "Warning: Could not install ctags (sudo may be restricted in container)"
      return 0
    fi
  elif [[ "${OSTYPE}" == "msys" ]]; then
    install_scoop
    echo "Installing ctags with scoop..."
    scoop install ctags
  else
    echo "Unsuported operating system..."
  fi
}

install_prefered_themes() {
  # -------------------------------------------------------------------------------
  # Add gruvbox theme to vim

  # Checking if Gitbash supports 256 color when running on windows
  if [[ "${OSTYPE}" == "msys" ]]; then
  CURRENT_COLOR_RANGE="$(tput colors)"
    if [[ "${CURRENT_COLOR_RANGE}" == "256" ]]; then
      echo "Windows Git Bash already supporting 256 colors."
    else
      if [[ -f ~/.bashrc ]] && [[ -f ~/.profile ]] ; then
      echo export TERM=xterm-256color >> ~/.profile
      echo source ~/.profile >> ~/.bashrc
      elif [[ -f ~/.bashrc ]] && [[ ! -f ~/.profile ]]; then
        touch ~/.profile
        echo export TERM=xterm-256color >> ~/.profile
        echo source ~/.profile >> ~/.bashrc
      elif [[ ! -f ~/.bashrc ]] && [[ -f ~/.profile ]]; then
        touch ~/.bashrc
        touch ~/.profile
        echo export TERM=xterm-256color >> ~/.profile
        echo source ~/.profile >> ~/.bashrc
      fi
    fi
  fi
  GRUVBOX_REPO_URL="https://github.com/morhetz/gruvbox.git"
  THEMES_DIR="${HOME}/vim-themes"
  GRUVBOX_COLORS_DIR="${THEMES_DIR}/gruvbox/colors"
  TARGET_COLORS_DIR="${HOME}/.vim/colors"
  GRUVBOX_VIM_FILE="${GRUVBOX_COLORS_DIR}/gruvbox.vim"

  # Clone gruvbox repo if the dir doesn't exist
  if [[ ! -d "${THEMES_DIR}/gruvbox" ]]; then
    echo "Cloning gruvbox repository..."
    mkdir -p "${THEMES_DIR}"
    git clone "${GRUVBOX_REPO_URL}" "${THEMES_DIR}/gruvbox"
  else
   echo "Gruvbox repository already exists."
  fi

  if [[ -f "${GRUVBOX_VIM_FILE}" ]]; then
    echo "Copying gruvbox.vim to ~/.vim/colors/..."
    cp "${GRUVBOX_VIM_FILE}" "${TARGET_COLORS_DIR}"
    echo "gruvbox.vim installed successfully."
  else
    echo "The file ${GRUVBOX_VIM_FILE} does not exist. Please check the repository."
    exit 1
  fi

  # -------------------------------------------------------------------------------
}

install_neovim() {
  # check if nvim command exists
  if [[ -n "$(which nvim)" ]]; then
    echo "Neovim is already installed."
  else
    echo "Detected operating system: $current_os"

    # Install Neovim based on OS
    echo "Installing Neovim..."
    case "$current_os" in
      "Linux")
        # Check if Downloads directory exists, create if not
        mkdir -p "${HOME}/Downloads"
        
        echo "Downloading Neovim..."
        curl -L "https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz" -o "${HOME}/Downloads/nvim-linux-x86_64.tar.gz"
        
        # Try to install to system location first, fallback to user installation
        if sudo tar -xzf "${HOME}/Downloads/nvim-linux-x86_64.tar.gz" -C "/usr/local" 2>/dev/null && sudo ln -s "/usr/local/nvim-linux-x86_64/bin/nvim" "/usr/local/bin" 2>/dev/null; then
          echo "Neovim installed to system location successfully."
        else
          echo "Warning: Could not install to system location (sudo may be restricted in container)"
          echo "Installing Neovim to user directory instead..."
          
          # Install to user directory
          mkdir -p "${HOME}/.local"
          tar -xzf "${HOME}/Downloads/nvim-linux-x86_64.tar.gz" -C "${HOME}/.local"
          ln -sf "${HOME}/.local/nvim-linux-x86_64/bin/nvim" "${HOME}/.local/bin/nvim"
          
          # Add to PATH if not already there
          if ! echo "$PATH" | grep -q "${HOME}/.local/bin"; then
            echo "Adding ${HOME}/.local/bin to PATH..."
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "${HOME}/.bashrc"
            if [[ -f "${HOME}/.zshrc" ]]; then
              echo 'export PATH="$HOME/.local/bin:$PATH"' >> "${HOME}/.zshrc"
            fi
          fi
          
          # Source shell config to update PATH
          if [[ -f "${HOME}/.zshrc" ]]; then
            source "${HOME}/.zshrc"
          else 
            source "${HOME}/.bashrc"
          fi
        fi
        
        # Clean up download
        rm -f "${HOME}/Downloads/nvim-linux-x86_64.tar.gz"
        ;;
      "Mac")
        if [[ $(uname -m) == 'arm64' ]]; then
          if command -v brew >/dev/null 2>&1; then
            brew install neovim
          else
            echo "Homebrew not found, downloading Neovim directly..."
            mkdir -p "${HOME}/Downloads"
            curl -L "https://github.com/neovim/neovim/releases/latest/download/nvim-macos-arm64.tar.gz" -o "${HOME}/Downloads/nvim-macos-arm64.tar.gz"
            
            if sudo tar -xzf "${HOME}/Downloads/nvim-macos-arm64.tar.gz" -C "/usr/local" 2>/dev/null && sudo ln -s "/usr/local/nvim-macos-arm64/bin/nvim" "/usr/local/bin" 2>/dev/null; then
              echo "Neovim installed to system location successfully."
            else
              echo "Installing Neovim to user directory..."
              mkdir -p "${HOME}/.local"
              tar -xzf "${HOME}/Downloads/nvim-macos-arm64.tar.gz" -C "${HOME}/.local"
              ln -sf "${HOME}/.local/nvim-macos-arm64/bin/nvim" "${HOME}/.local/bin/nvim"
              echo 'export PATH="$HOME/.local/bin:$PATH"' >> "${HOME}/.zshrc"
            fi
            rm -f "${HOME}/Downloads/nvim-macos-arm64.tar.gz"
          fi
          source_shell_config
        else
          if command -v brew >/dev/null 2>&1; then
            brew install neovim
          else
            echo "Homebrew not found, downloading Neovim directly..."
            mkdir -p "${HOME}/Downloads"
            curl -L "https://github.com/neovim/neovim/releases/latest/download/nvim-macos-x86_64.tar.gz" -o "${HOME}/Downloads/nvim-macos-x86_64.tar.gz"
            
            if sudo tar -xzf "${HOME}/Downloads/nvim-macos-x86_64.tar.gz" -C "/usr/local" 2>/dev/null && sudo ln -s "/usr/local/nvim-macos-x86_64/bin/nvim" "/usr/local/bin" 2>/dev/null; then
              echo "Neovim installed to system location successfully."
            else
              echo "Installing Neovim to user directory..."
              mkdir -p "${HOME}/.local"
              tar -xzf "${HOME}/Downloads/nvim-macos-x86_64.tar.gz" -C "${HOME}/.local"
              ln -sf "${HOME}/.local/nvim-macos-x86_64/bin/nvim" "${HOME}/.local/bin/nvim"
              echo 'export PATH="$HOME/.local/bin:$PATH"' >> "${HOME}/.zshrc"
            fi
            rm -f "${HOME}/Downloads/nvim-macos-x86_64.tar.gz"
          fi
          source_shell_config
        fi
      ;;
    esac

    # Verify installation
    if command_exists nvim; then
        echo "Neovim has been successfully installed!"
        nvim --version | head -n 1
    else
        echo "Installation failed. Please check the error messages above."
        exit 1
    fi
  fi
}